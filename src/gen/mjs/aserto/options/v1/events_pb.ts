// @generated by protoc-gen-es v1.8.0 with parameter "target=ts+js"
// @generated from file aserto/options/v1/events.proto (package aserto.options.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldOptions, Message, MessageOptions, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message aserto.options.v1.Event
 */
export class Event extends Message<Event> {
  /**
   * @generated from field: string subject_template = 2;
   */
  subjectTemplate = "";

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.options.v1.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "subject_template", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

/**
 * @generated from extension: aserto.options.v1.Event event = 50095;
 */
export const event = proto3.makeExtension<MessageOptions, Event>(
  "aserto.options.v1.event", 
  MessageOptions, 
  () => ({ no: 50095, kind: "message", T: Event }),
);

/**
 * @generated from extension: string tag = 50095;
 */
export const tag = proto3.makeExtension<FieldOptions, string>(
  "aserto.options.v1.tag", 
  FieldOptions, 
  { no: 50095, kind: "scalar", T: 9 /* ScalarType.STRING */ },
);

