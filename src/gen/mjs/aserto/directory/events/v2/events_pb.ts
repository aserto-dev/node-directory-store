// @generated by protoc-gen-es v1.8.0 with parameter "target=ts+js"
// @generated from file aserto/directory/events/v2/events.proto (package aserto.directory.events.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum aserto.directory.events.v2.Directory
 */
export enum Directory {
  /**
   * @generated from enum value: DIRECTORY_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: DIRECTORY_ROOT = 1;
   */
  ROOT = 1,

  /**
   * @generated from enum value: DIRECTORY_TENANT = 2;
   */
  TENANT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Directory)
proto3.util.setEnumType(Directory, "aserto.directory.events.v2.Directory", [
  { no: 0, name: "DIRECTORY_UNKNOWN" },
  { no: 1, name: "DIRECTORY_ROOT" },
  { no: 2, name: "DIRECTORY_TENANT" },
]);

/**
 * @generated from message aserto.directory.events.v2.TenantSchemaChanged
 */
export class TenantSchemaChanged extends Message<TenantSchemaChanged> {
  /**
   * @generated from field: string tenant_id = 1;
   */
  tenantId = "";

  /**
   * @generated from field: string source_id = 2;
   */
  sourceId = "";

  /**
   * @generated from field: aserto.directory.events.v2.Directory directory = 3;
   */
  directory = Directory.UNKNOWN;

  constructor(data?: PartialMessage<TenantSchemaChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.events.v2.TenantSchemaChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "directory", kind: "enum", T: proto3.getEnumType(Directory) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantSchemaChanged {
    return new TenantSchemaChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantSchemaChanged {
    return new TenantSchemaChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantSchemaChanged {
    return new TenantSchemaChanged().fromJsonString(jsonString, options);
  }

  static equals(a: TenantSchemaChanged | PlainMessage<TenantSchemaChanged> | undefined, b: TenantSchemaChanged | PlainMessage<TenantSchemaChanged> | undefined): boolean {
    return proto3.util.equals(TenantSchemaChanged, a, b);
  }
}

