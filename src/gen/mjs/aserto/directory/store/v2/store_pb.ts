// @generated by protoc-gen-es v1.8.0 with parameter "target=ts+js"
// @generated from file aserto/directory/store/v2/store.proto (package aserto.directory.store.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Empty, Message, proto3, Struct, Timestamp } from "@bufbuild/protobuf";
import { PaginationRequest, PaginationResponse } from "../../common/v2/common_pb.js";

/**
 * @generated from enum aserto.directory.store.v2.Schema
 */
export enum Schema {
  /**
   * @generated from enum value: SCHEMA_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: SCHEMA_SHARED = 1;
   */
  SHARED = 1,

  /**
   * @generated from enum value: SCHEMA_TENANT = 2;
   */
  TENANT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Schema)
proto3.util.setEnumType(Schema, "aserto.directory.store.v2.Schema", [
  { no: 0, name: "SCHEMA_UNKNOWN" },
  { no: 1, name: "SCHEMA_SHARED" },
  { no: 2, name: "SCHEMA_TENANT" },
]);

/**
 * @generated from enum aserto.directory.store.v2.Migrate
 */
export enum Migrate {
  /**
   * @generated from enum value: MIGRATE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: MIGRATE_UP = 1;
   */
  UP = 1,

  /**
   * @generated from enum value: MIGRATE_DOWN = 2;
   */
  DOWN = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Migrate)
proto3.util.setEnumType(Migrate, "aserto.directory.store.v2.Migrate", [
  { no: 0, name: "MIGRATE_UNKNOWN" },
  { no: 1, name: "MIGRATE_UP" },
  { no: 2, name: "MIGRATE_DOWN" },
]);

/**
 * @generated from message aserto.directory.store.v2.Tenant
 */
export class Tenant extends Message<Tenant> {
  /**
   * tenant id (UUID, aserto-id --type tenant)
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * tenant name
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * created at timestamp (UTC)
   *
   * @generated from field: google.protobuf.Timestamp created_at = 20;
   */
  createdAt?: Timestamp;

  /**
   * last updated timestamp (UTC)
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 21;
   */
  updatedAt?: Timestamp;

  /**
   * last updated timestamp (UTC)
   *
   * @generated from field: google.protobuf.Timestamp deleted_at = 22;
   */
  deletedAt?: Timestamp;

  constructor(data?: PartialMessage<Tenant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.Tenant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "created_at", kind: "message", T: Timestamp },
    { no: 21, name: "updated_at", kind: "message", T: Timestamp },
    { no: 22, name: "deleted_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tenant {
    return new Tenant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tenant {
    return new Tenant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tenant {
    return new Tenant().fromJsonString(jsonString, options);
  }

  static equals(a: Tenant | PlainMessage<Tenant> | undefined, b: Tenant | PlainMessage<Tenant> | undefined): boolean {
    return proto3.util.equals(Tenant, a, b);
  }
}

/**
 * @generated from message aserto.directory.store.v2.GetTenantRequest
 */
export class GetTenantRequest extends Message<GetTenantRequest> {
  /**
   * @generated from oneof aserto.directory.store.v2.GetTenantRequest.data
   */
  data: {
    /**
     * tenant id (UUID, aserto-id --type tenant)
     *
     * @generated from field: string id = 1;
     */
    value: string;
    case: "id";
  } | {
    /**
     * tenant name
     *
     * @generated from field: string name = 2;
     */
    value: string;
    case: "name";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GetTenantRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.GetTenantRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "data" },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "data" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTenantRequest {
    return new GetTenantRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTenantRequest {
    return new GetTenantRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTenantRequest {
    return new GetTenantRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTenantRequest | PlainMessage<GetTenantRequest> | undefined, b: GetTenantRequest | PlainMessage<GetTenantRequest> | undefined): boolean {
    return proto3.util.equals(GetTenantRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.store.v2.GetTenantResponse
 */
export class GetTenantResponse extends Message<GetTenantResponse> {
  /**
   * tenant instance
   *
   * @generated from field: aserto.directory.store.v2.Tenant result = 1;
   */
  result?: Tenant;

  constructor(data?: PartialMessage<GetTenantResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.GetTenantResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Tenant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTenantResponse {
    return new GetTenantResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTenantResponse {
    return new GetTenantResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTenantResponse {
    return new GetTenantResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTenantResponse | PlainMessage<GetTenantResponse> | undefined, b: GetTenantResponse | PlainMessage<GetTenantResponse> | undefined): boolean {
    return proto3.util.equals(GetTenantResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.store.v2.CreateTenantRequest
 */
export class CreateTenantRequest extends Message<CreateTenantRequest> {
  /**
   * tenant instance
   *
   * @generated from field: aserto.directory.store.v2.Tenant tenant = 1;
   */
  tenant?: Tenant;

  constructor(data?: PartialMessage<CreateTenantRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.CreateTenantRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "message", T: Tenant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTenantRequest {
    return new CreateTenantRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTenantRequest {
    return new CreateTenantRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTenantRequest {
    return new CreateTenantRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTenantRequest | PlainMessage<CreateTenantRequest> | undefined, b: CreateTenantRequest | PlainMessage<CreateTenantRequest> | undefined): boolean {
    return proto3.util.equals(CreateTenantRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.store.v2.CreateTenantResponse
 */
export class CreateTenantResponse extends Message<CreateTenantResponse> {
  /**
   * tenant instance
   *
   * @generated from field: aserto.directory.store.v2.Tenant result = 1;
   */
  result?: Tenant;

  constructor(data?: PartialMessage<CreateTenantResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.CreateTenantResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Tenant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTenantResponse {
    return new CreateTenantResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTenantResponse {
    return new CreateTenantResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTenantResponse {
    return new CreateTenantResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTenantResponse | PlainMessage<CreateTenantResponse> | undefined, b: CreateTenantResponse | PlainMessage<CreateTenantResponse> | undefined): boolean {
    return proto3.util.equals(CreateTenantResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.store.v2.DeleteTenantRequest
 */
export class DeleteTenantRequest extends Message<DeleteTenantRequest> {
  /**
   * tenant id (UUID, aserto-id --type tenant)
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * permanently delete tenant (default: false)
   *
   * @generated from field: bool hard = 2;
   */
  hard = false;

  constructor(data?: PartialMessage<DeleteTenantRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.DeleteTenantRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hard", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTenantRequest {
    return new DeleteTenantRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTenantRequest {
    return new DeleteTenantRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTenantRequest {
    return new DeleteTenantRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTenantRequest | PlainMessage<DeleteTenantRequest> | undefined, b: DeleteTenantRequest | PlainMessage<DeleteTenantRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTenantRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.store.v2.DeleteTenantResponse
 */
export class DeleteTenantResponse extends Message<DeleteTenantResponse> {
  /**
   * @generated from field: google.protobuf.Empty result = 1;
   */
  result?: Empty;

  constructor(data?: PartialMessage<DeleteTenantResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.DeleteTenantResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Empty },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTenantResponse {
    return new DeleteTenantResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTenantResponse {
    return new DeleteTenantResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTenantResponse {
    return new DeleteTenantResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTenantResponse | PlainMessage<DeleteTenantResponse> | undefined, b: DeleteTenantResponse | PlainMessage<DeleteTenantResponse> | undefined): boolean {
    return proto3.util.equals(DeleteTenantResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.store.v2.ListTenantsRequest
 */
export class ListTenantsRequest extends Message<ListTenantsRequest> {
  /**
   * pagination request
   *
   * @generated from field: aserto.directory.common.v2.PaginationRequest page = 9;
   */
  page?: PaginationRequest;

  constructor(data?: PartialMessage<ListTenantsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.ListTenantsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 9, name: "page", kind: "message", T: PaginationRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTenantsRequest {
    return new ListTenantsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTenantsRequest {
    return new ListTenantsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTenantsRequest {
    return new ListTenantsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTenantsRequest | PlainMessage<ListTenantsRequest> | undefined, b: ListTenantsRequest | PlainMessage<ListTenantsRequest> | undefined): boolean {
    return proto3.util.equals(ListTenantsRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.store.v2.ListTenantsResponse
 */
export class ListTenantsResponse extends Message<ListTenantsResponse> {
  /**
   * result tenant list
   *
   * @generated from field: repeated aserto.directory.store.v2.Tenant results = 1;
   */
  results: Tenant[] = [];

  /**
   * pagination response
   *
   * @generated from field: aserto.directory.common.v2.PaginationResponse page = 9;
   */
  page?: PaginationResponse;

  constructor(data?: PartialMessage<ListTenantsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.ListTenantsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: Tenant, repeated: true },
    { no: 9, name: "page", kind: "message", T: PaginationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTenantsResponse {
    return new ListTenantsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTenantsResponse {
    return new ListTenantsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTenantsResponse {
    return new ListTenantsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTenantsResponse | PlainMessage<ListTenantsResponse> | undefined, b: ListTenantsResponse | PlainMessage<ListTenantsResponse> | undefined): boolean {
    return proto3.util.equals(ListTenantsResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.store.v2.PurgeDeletedTenantsRequest
 */
export class PurgeDeletedTenantsRequest extends Message<PurgeDeletedTenantsRequest> {
  /**
   * if spcecified, only purge tenants deleted
   *
   * @generated from field: google.protobuf.Timestamp deleted_before = 1;
   */
  deletedBefore?: Timestamp;

  /**
   * before the provided timestamp (UTC).
   *
   * tenant id (UUID, aserto-id --type tenant).
   *
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<PurgeDeletedTenantsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.PurgeDeletedTenantsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deleted_before", kind: "message", T: Timestamp },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurgeDeletedTenantsRequest {
    return new PurgeDeletedTenantsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurgeDeletedTenantsRequest {
    return new PurgeDeletedTenantsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurgeDeletedTenantsRequest {
    return new PurgeDeletedTenantsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PurgeDeletedTenantsRequest | PlainMessage<PurgeDeletedTenantsRequest> | undefined, b: PurgeDeletedTenantsRequest | PlainMessage<PurgeDeletedTenantsRequest> | undefined): boolean {
    return proto3.util.equals(PurgeDeletedTenantsRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.store.v2.PurgeDeletedTenantsResponse
 */
export class PurgeDeletedTenantsResponse extends Message<PurgeDeletedTenantsResponse> {
  /**
   * list of purged tenants
   *
   * @generated from field: repeated aserto.directory.store.v2.Tenant results = 1;
   */
  results: Tenant[] = [];

  constructor(data?: PartialMessage<PurgeDeletedTenantsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.PurgeDeletedTenantsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: Tenant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurgeDeletedTenantsResponse {
    return new PurgeDeletedTenantsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurgeDeletedTenantsResponse {
    return new PurgeDeletedTenantsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurgeDeletedTenantsResponse {
    return new PurgeDeletedTenantsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PurgeDeletedTenantsResponse | PlainMessage<PurgeDeletedTenantsResponse> | undefined, b: PurgeDeletedTenantsResponse | PlainMessage<PurgeDeletedTenantsResponse> | undefined): boolean {
    return proto3.util.equals(PurgeDeletedTenantsResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.store.v2.MigrateSchemaRequest
 */
export class MigrateSchemaRequest extends Message<MigrateSchemaRequest> {
  /**
   * schemae SHARED or TENANT
   *
   * @generated from field: aserto.directory.store.v2.Schema schema = 1;
   */
  schema = Schema.UNKNOWN;

  /**
   * migrate UP or DOWN
   *
   * @generated from field: aserto.directory.store.v2.Migrate migrate = 2;
   */
  migrate = Migrate.UNKNOWN;

  /**
   * schema version
   *
   * @generated from field: optional string version = 3;
   */
  version?: string;

  /**
   * tenant id (UUID, aserto-id --type tenant)
   *
   * @generated from field: optional string tenant_id = 4;
   */
  tenantId?: string;

  constructor(data?: PartialMessage<MigrateSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.MigrateSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "enum", T: proto3.getEnumType(Schema) },
    { no: 2, name: "migrate", kind: "enum", T: proto3.getEnumType(Migrate) },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigrateSchemaRequest {
    return new MigrateSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigrateSchemaRequest {
    return new MigrateSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigrateSchemaRequest {
    return new MigrateSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MigrateSchemaRequest | PlainMessage<MigrateSchemaRequest> | undefined, b: MigrateSchemaRequest | PlainMessage<MigrateSchemaRequest> | undefined): boolean {
    return proto3.util.equals(MigrateSchemaRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.store.v2.MigrateSchemaResponse
 */
export class MigrateSchemaResponse extends Message<MigrateSchemaResponse> {
  /**
   * migration results
   *
   * @generated from field: repeated aserto.directory.store.v2.Migration results = 1;
   */
  results: Migration[] = [];

  constructor(data?: PartialMessage<MigrateSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.MigrateSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: Migration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigrateSchemaResponse {
    return new MigrateSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigrateSchemaResponse {
    return new MigrateSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigrateSchemaResponse {
    return new MigrateSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MigrateSchemaResponse | PlainMessage<MigrateSchemaResponse> | undefined, b: MigrateSchemaResponse | PlainMessage<MigrateSchemaResponse> | undefined): boolean {
    return proto3.util.equals(MigrateSchemaResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.store.v2.Migration
 */
export class Migration extends Message<Migration> {
  /**
   * tenant-id (0 == NO tenant)
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * number of migrations applied
   *
   * @generated from field: int32 applied = 2;
   */
  applied = 0;

  /**
   * status
   *
   * @generated from field: string status = 3;
   */
  status = "";

  constructor(data?: PartialMessage<Migration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.Migration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "applied", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Migration {
    return new Migration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Migration {
    return new Migration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Migration {
    return new Migration().fromJsonString(jsonString, options);
  }

  static equals(a: Migration | PlainMessage<Migration> | undefined, b: Migration | PlainMessage<Migration> | undefined): boolean {
    return proto3.util.equals(Migration, a, b);
  }
}

/**
 * @generated from message aserto.directory.store.v2.InfoRequest
 */
export class InfoRequest extends Message<InfoRequest> {
  /**
   * tenant id (UUID, aserto-id --type tenant)
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<InfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.InfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InfoRequest {
    return new InfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InfoRequest {
    return new InfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InfoRequest {
    return new InfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InfoRequest | PlainMessage<InfoRequest> | undefined, b: InfoRequest | PlainMessage<InfoRequest> | undefined): boolean {
    return proto3.util.equals(InfoRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.store.v2.InfoResponse
 */
export class InfoResponse extends Message<InfoResponse> {
  /**
   * tenant store info
   *
   * @generated from field: google.protobuf.Struct info = 1;
   */
  info?: Struct;

  constructor(data?: PartialMessage<InfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.InfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InfoResponse {
    return new InfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InfoResponse {
    return new InfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InfoResponse {
    return new InfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InfoResponse | PlainMessage<InfoResponse> | undefined, b: InfoResponse | PlainMessage<InfoResponse> | undefined): boolean {
    return proto3.util.equals(InfoResponse, a, b);
  }
}

/**
 * @generated from message aserto.directory.store.v2.DeleteIDPConnectionRequest
 */
export class DeleteIDPConnectionRequest extends Message<DeleteIDPConnectionRequest> {
  /**
   * tenant id (UUID, aserto-id --type tenant)
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * idp connection id (UUID, aserto-id --type connection)
   *
   * @generated from field: string connection = 2;
   */
  connection = "";

  constructor(data?: PartialMessage<DeleteIDPConnectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.DeleteIDPConnectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteIDPConnectionRequest {
    return new DeleteIDPConnectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteIDPConnectionRequest {
    return new DeleteIDPConnectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteIDPConnectionRequest {
    return new DeleteIDPConnectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteIDPConnectionRequest | PlainMessage<DeleteIDPConnectionRequest> | undefined, b: DeleteIDPConnectionRequest | PlainMessage<DeleteIDPConnectionRequest> | undefined): boolean {
    return proto3.util.equals(DeleteIDPConnectionRequest, a, b);
  }
}

/**
 * @generated from message aserto.directory.store.v2.DeleteIDPConnectionResponse
 */
export class DeleteIDPConnectionResponse extends Message<DeleteIDPConnectionResponse> {
  /**
   * @generated from field: google.protobuf.Empty result = 1;
   */
  result?: Empty;

  constructor(data?: PartialMessage<DeleteIDPConnectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.directory.store.v2.DeleteIDPConnectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Empty },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteIDPConnectionResponse {
    return new DeleteIDPConnectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteIDPConnectionResponse {
    return new DeleteIDPConnectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteIDPConnectionResponse {
    return new DeleteIDPConnectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteIDPConnectionResponse | PlainMessage<DeleteIDPConnectionResponse> | undefined, b: DeleteIDPConnectionResponse | PlainMessage<DeleteIDPConnectionResponse> | undefined): boolean {
    return proto3.util.equals(DeleteIDPConnectionResponse, a, b);
  }
}

